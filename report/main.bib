
@Online {SETuP,
  title = {SETuP Project},
  url = {http://www.powerwater.com.au/solardiesel}
}

@Online{Solar-Handbook,
  title = {Solar Diesel Handbook},
  url = {http://www.powerwater.com.au/solardiesel}
}

@Online{ASIM,
  title = {ASIM Model},
  url = {http://www.powerwater.com.au/solardiesel}
}

@Book{Schrodinger44,
  author =	"E. Schr{\"o}dinger",
  title =	"What is life?",
  publisher =	"Cambridge University Press",
  address =	"Cambridge",
  year = 	"1944",
  keywords =	"refs-general,life-defs",
  annote =	"A classic treatise on the nature of life.",
}

@Online {Plot,
  author = {Vivian McPhail},
  title = {The Plot Package},
  month = {2},
  year = {2014}, 
  url = {http://hackage.haskell.org/package/plot}
}

@Online {Haskell,
   title="Haskell Programming Language Homepage",
   url= {http://www.haskell.org}
}

@Article{QuickCheck,
  author =	"Koen Claessen and John Hughes",
  title =	"{QuickCheck}: a lightweight tool for random testing of
		 {Haskell} programs",
  journal =	"ACM SIG{\-}PLAN Notices",
  volume =	"46",
  number =	"4",
  pages =	"53--64",
  month =	apr,
  year = 	"2011",
  CODEN =	"SINODQ",
  doi =  	"http://dx.doi.org/10.1145/1988042.1988046",
  ISSN = 	"0362-1340 (print), 1523-2867 (print), 1558-1160
		 (electronic)",
  issn-l =	"0362-1340",
  bibdate =	"Tue May 24 10:55:07 MDT 2011",
  bibsource =	"http://portal.acm.org/;
		 http://www.math.utah.edu/pub/tex/bib/sigplan2010.bib",
  abstract =	"QuickCheck is a tool which aids the Haskell programmer
		 in formulating and testing properties of programs.
		 Properties are described as Haskell functions, and can
		 be automatically tested on random input, but it is also
		 possible to define custom test data generators. We
		 present a number of case studies, in which the tool was
		 successfully used, and also point out some pitfalls to
		 avoid. Random testing is especially suitable for
		 functional programs because properties can be stated at
		 a fine grain.",
  acknowledgement = "Nelson H. F. Beebe, University of Utah, Department
		 of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake
		 City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1
		 801 581 4148, e-mail: \path|beebe@math.utah.edu|,
		 \path|beebe@acm.org|, \path|beebe@computer.org|
		 (Internet), URL:
		 \path|http://www.math.utah.edu/~beebe/|",
  fjournal =	"ACM SIGPLAN Notices",
  doi-url =	"http://dx.doi.org/10.1145/1988042.1988046",
}

@Article{Cordes:1991:LPP,
  author =	"David Cordes and Marcus Brown",
  title =	"The Literate-Programming Paradigm",
  journal =	"Computer",
  volume =	"24",
  number =	"6",
  pages =	"52--61",
  month =	jun,
  year = 	"1991",
  CODEN =	"CPTRB4",
  ISSN = 	"0018-9162 (print), 1558-0814 (electronic)",
  issn-l =	"0018-9162",
  bibdate =	"Tue Feb 04 06:58:08 1997",
  bibsource =	"Compendex database;
		 http://www.math.utah.edu/pub/tex/bib/computer1990.bib;
		 Misc/IMMD_IV.bib",
  abstract =	"Literate programming, a technique for coding software
		 systems that promotes readability and comprehension, is
		 examined in detail. The current literate-programming
		 paradigm is reviewed by looking at two sample literate
		 programs. A critique of literate programming as it is
		 currently used is presented, and methods for enhancing
		 the process are explored. A number of new facilities
		 are proposed, and restrictions on current
		 literate-programming practices are suggested. (11
		 Refs.)",
  acknowledgement = "Nelson H. F. Beebe, University of Utah, Department
		 of Mathematics, 110 LCB, 155 S 1400 E RM 233, Salt Lake
		 City, UT 84112-0090, USA, Tel: +1 801 581 5254, FAX: +1
		 801 581 4148, e-mail: \path|beebe@math.utah.edu|,
		 \path|beebe@acm.org|, \path|beebe@computer.org|
		 (Internet), URL:
		 \path|http://www.math.utah.edu/~beebe/|",
  affiliation =  "Univ of Alabama, Tuscaloosa, AL, USA",
  classification = "723; C6110 (Systems analysis and programming)",
  journalabr =	"Computer",
  keywords =	"Coding software systems; Computer Metatheory ---
		 Programming Theory; Computer Software;
		 Literate-programming paradigm; Software Development
		 Systems; Software Engineering",
  thesaurus =	"Programming",
}